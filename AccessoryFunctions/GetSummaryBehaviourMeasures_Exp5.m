function [allaccuracies, allconfidences, allbiasindices] = GetSummaryBehaviourMeasures_Exp5()

% load behavioural data exp 4
load('data_human_noise_blindness_Exp_5.mat')

allaccuracies   = nan(24,24);
allconfidences  = nan(24,24);
allbiasindices  = nan(24,24);

for iSub = 1:24
    indsub   = data.subject == iSub;
    
    % define important variables
    perceptualvals  = data.pvs(indsub,:);
    meanofstim      = nanmean(perceptualvals,2);
    catofstim       = meanofstim>0;
    
    % contrast of stimuli
    contrast        = data.contrast(indsub);
    allcontrasts    = unique(contrast);
    lowcontrast     = contrast == allcontrasts(1);
    highcontrast    = contrast == allcontrasts(2);
    
    % variability of stimuli array
    targetstds      = data.targetarraystd(indsub);
    actualstds      = nanstd(perceptualvals,[],2);
    highstd         = targetstds == 10;
    lowstd          = targetstds <  10;

    % cueing condition
    wastrialbiased  = data.biasedtrial(indsub) == 1;    
    
    respcor = data.wasrespcor(indsub);
    confrep = data.confidencerep(indsub);
    fixed_contrast      = data.fixhighcontrial(indsub)|data.fixlowcontrial(indsub);
    fixed_variability   = data.fixhighvartrial(indsub)|data.fixlowvartrial(indsub);
    
    
    trialtypesn = [ ...
        (wastrialbiased==0) & lowcontrast  & lowstd   ...
        (wastrialbiased==0) & lowcontrast  & highstd  ...
        (wastrialbiased==0) & highcontrast & lowstd   ...
        (wastrialbiased==0) & highcontrast & highstd  ...
        (wastrialbiased==0) & lowcontrast  & lowstd  & fixed_contrast ...
        (wastrialbiased==0) & lowcontrast  & highstd & fixed_contrast ...
        (wastrialbiased==0) & highcontrast & lowstd  & fixed_contrast ...
        (wastrialbiased==0) & highcontrast & highstd & fixed_contrast ...
        (wastrialbiased==0) & lowcontrast  & lowstd  & fixed_variability ...
        (wastrialbiased==0) & lowcontrast  & highstd & fixed_variability ...
        (wastrialbiased==0) & highcontrast & lowstd  & fixed_variability ...
        (wastrialbiased==0) & highcontrast & highstd & fixed_variability ];
    
    trialtypesb = [ ...
        (wastrialbiased==1) & lowcontrast  & lowstd   ...
        (wastrialbiased==1) & lowcontrast  & highstd  ...
        (wastrialbiased==1) & highcontrast & lowstd   ...
        (wastrialbiased==1) & highcontrast & highstd  ...
        (wastrialbiased==1) & lowcontrast  & lowstd  & fixed_contrast ...
        (wastrialbiased==1) & lowcontrast  & highstd & fixed_contrast ...
        (wastrialbiased==1) & highcontrast & lowstd  & fixed_contrast ...
        (wastrialbiased==1) & highcontrast & highstd & fixed_contrast ...
        (wastrialbiased==1) & lowcontrast  & lowstd  & fixed_variability...
        (wastrialbiased==1) & lowcontrast  & highstd & fixed_variability...
        (wastrialbiased==1) & highcontrast & lowstd  & fixed_variability...
        (wastrialbiased==1) & highcontrast & highstd & fixed_variability];
    
    alltrialtypes = [trialtypesn trialtypesb];
    
    % get and store accuracies (and confidence) for each condition
    respcormat                  = repmat(respcor,[1 24]);
    respcormat(~alltrialtypes)  = nan;
    accuracies                  = nanmean(respcormat);
    allaccuracies(iSub,:)       = accuracies;
    confmat                     = repmat(confrep,[1 24]);
    confmat(~alltrialtypes)     = nan;
    confidences                 = nanmean(confmat);
    allconfidences(iSub,:)      = confidences;
    
    % get and store bias indices
    wascuecw        = data.whichcue(indsub)== 1;
    wascueccw       = data.whichcue(indsub)==-1;
    trialtypesbycue = [ ...
        (wastrialbiased==0) & lowcontrast   & lowstd   & wascuecw    ...
        (wastrialbiased==0) & lowcontrast   & lowstd   & wascueccw   ...
        (wastrialbiased==0) & lowcontrast   & highstd  & wascuecw    ...
        (wastrialbiased==0) & lowcontrast   & highstd  & wascueccw   ...
        (wastrialbiased==0) & highcontrast  & lowstd   & wascuecw    ...
        (wastrialbiased==0) & highcontrast  & lowstd   & wascueccw   ...
        (wastrialbiased==0) & highcontrast  & highstd  & wascuecw    ...
        (wastrialbiased==0) & highcontrast  & highstd  & wascueccw   ... 
        (wastrialbiased==1) & lowcontrast   & lowstd   & wascuecw    ...
        (wastrialbiased==1) & lowcontrast   & lowstd   & wascueccw   ...
        (wastrialbiased==1) & lowcontrast   & highstd  & wascuecw    ...
        (wastrialbiased==1) & lowcontrast   & highstd  & wascueccw   ...
        (wastrialbiased==1) & highcontrast  & lowstd   & wascuecw    ...
        (wastrialbiased==1) & highcontrast  & lowstd   & wascueccw   ...
        (wastrialbiased==1) & highcontrast  & highstd  & wascuecw    ...
        (wastrialbiased==1) & highcontrast  & highstd  & wascueccw   ...
        (wastrialbiased==0) & lowcontrast   & lowstd   & wascuecw   & fixed_contrast ...
        (wastrialbiased==0) & lowcontrast   & lowstd   & wascueccw  & fixed_contrast ...
        (wastrialbiased==0) & lowcontrast   & highstd  & wascuecw   & fixed_contrast ...
        (wastrialbiased==0) & lowcontrast   & highstd  & wascueccw  & fixed_contrast ...
        (wastrialbiased==0) & highcontrast  & lowstd   & wascuecw   & fixed_contrast ...
        (wastrialbiased==0) & highcontrast  & lowstd   & wascueccw  & fixed_contrast ...
        (wastrialbiased==0) & highcontrast  & highstd  & wascuecw   & fixed_contrast ...
        (wastrialbiased==0) & highcontrast  & highstd  & wascueccw  & fixed_contrast ... 
        (wastrialbiased==1) & lowcontrast   & lowstd   & wascuecw   & fixed_contrast ...
        (wastrialbiased==1) & lowcontrast   & lowstd   & wascueccw  & fixed_contrast ...
        (wastrialbiased==1) & lowcontrast   & highstd  & wascuecw   & fixed_contrast ...
        (wastrialbiased==1) & lowcontrast   & highstd  & wascueccw  & fixed_contrast ...
        (wastrialbiased==1) & highcontrast  & lowstd   & wascuecw   & fixed_contrast ...
        (wastrialbiased==1) & highcontrast  & lowstd   & wascueccw  & fixed_contrast ...
        (wastrialbiased==1) & highcontrast  & highstd  & wascuecw   & fixed_contrast ...
        (wastrialbiased==1) & highcontrast  & highstd  & wascueccw  & fixed_contrast ...
        (wastrialbiased==0) & lowcontrast   & lowstd   & wascuecw   & fixed_variability ...
        (wastrialbiased==0) & lowcontrast   & lowstd   & wascueccw  & fixed_variability ...
        (wastrialbiased==0) & lowcontrast   & highstd  & wascuecw   & fixed_variability ...
        (wastrialbiased==0) & lowcontrast   & highstd  & wascueccw  & fixed_variability ...
        (wastrialbiased==0) & highcontrast  & lowstd   & wascuecw   & fixed_variability ...
        (wastrialbiased==0) & highcontrast  & lowstd   & wascueccw  & fixed_variability ...
        (wastrialbiased==0) & highcontrast  & highstd  & wascuecw   & fixed_variability ...
        (wastrialbiased==0) & highcontrast  & highstd  & wascueccw  & fixed_variability ... 
        (wastrialbiased==1) & lowcontrast   & lowstd   & wascuecw   & fixed_variability ...
        (wastrialbiased==1) & lowcontrast   & lowstd   & wascueccw  & fixed_variability ...
        (wastrialbiased==1) & lowcontrast   & highstd  & wascuecw   & fixed_variability ...
        (wastrialbiased==1) & lowcontrast   & highstd  & wascueccw  & fixed_variability ...
        (wastrialbiased==1) & highcontrast  & lowstd   & wascuecw   & fixed_variability ...
        (wastrialbiased==1) & highcontrast  & lowstd   & wascueccw  & fixed_variability ...
        (wastrialbiased==1) & highcontrast  & highstd  & wascuecw   & fixed_variability ...
        (wastrialbiased==1) & highcontrast  & highstd  & wascueccw  & fixed_variability ];
    
    num_conditions = 2*2*2*2*3;
    cwstimmat  = repmat( catofstim  ,[1 num_conditions]);
    ccwstimmat = repmat(~catofstim  ,[1 num_conditions]);
    corrmat    = repmat( respcor    ,[1 num_conditions]);
    wrongmat   = repmat( 1-respcor  ,[1 num_conditions]);
    
    % compute Signal Detection Theory measures
    signalpresent  = nansum( cwstimmat  .* trialtypesbycue) + 1  ;
    signalabsent   = nansum( ccwstimmat .* trialtypesbycue) + 1  ;
    numhits        = nansum( corrmat    .* trialtypesbycue .* cwstimmat ) + 0.5;
    numfa          = nansum( wrongmat   .* trialtypesbycue .* ccwstimmat) + 0.5;
    norminvhitr    = norminv( numhits./ signalpresent);
    norminvfar     = norminv( numfa  ./ signalabsent);
    criterion      = -0.5.*(norminvhitr+norminvfar);
    
    % measure the effect that the cue has on shifting the criterion:
    % biasindex (compute also for neutral trials using random cue values)
    biasindex      = (criterion(2:2:num_conditions)-criterion(1:2:(num_conditions-1)));
    allbiasindices(iSub,:) = biasindex;
end

end